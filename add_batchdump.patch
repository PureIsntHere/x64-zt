diff --git a/src/zonetool/h1/zonetool.cpp b/src/zonetool/h1/zonetool.cpp
index 1234567..89abcdef 100644
--- a/src/zonetool/h1/zonetool.cpp
+++ b/src/zonetool/h1/zonetool.cpp
@@ namespace zonetool::h1 {
-    void load_proto_stub(utils::hook::assembler& a)
+    //––– New: register our batchdump commands –––
+    static void register_commands()
+    {
+        namespace fs = std::filesystem;
+
+        // batchdumpzone <folder>
+        ::h1::command::add("batchdumpzone", [](const ::h1::command::params& p){
+            if (p.size() != 2) { ZONETOOL_ERROR("usage: batchdumpzone <folder>"); return; }
+            fs::path dir(p.get(1));
+            if (!fs::exists(dir) || !fs::is_directory(dir)) {
+                ZONETOOL_ERROR("Invalid directory: %s", p.get(1)); return;
+            }
+            std::vector<fs::path> zones;
+            for (auto& e : fs::directory_iterator(dir))
+                if (e.is_regular_file() && e.path().extension()==".ff")
+                    zones.push_back(e.path());
+
+            for (auto& z : zones) {
+                ZONETOOL_INFO("Batch dumping zone \"%s\"", z.string().c_str());
+                ::h1::command::execute("dumpzone " + z.string(), true);
+                ::h1::command::execute("unloadzones",    true);
+            }
+            ZONETOOL_INFO("batchdumpzone complete (%zu zones)", zones.size());
+        });
+
+        // batchdumpzonewalk <folder>
+        ::h1::command::add("batchdumpzonewalk", [](const ::h1::command::params& p){
+            if (p.size() != 2) { ZONETOOL_ERROR("usage: batchdumpzonewalk <folder>"); return; }
+            fs::path dir(p.get(1));
+            if (!fs::exists(dir) || !fs::is_directory(dir)) {
+                ZONETOOL_ERROR("Invalid directory: %s", p.get(1)); return;
+            }
+            std::vector<fs::path> zones;
+            for (auto& e : fs::recursive_directory_iterator(dir))
+                if (e.is_regular_file() && e.path().extension()==".ff")
+                    zones.push_back(e.path());
+
+            for (auto& z : zones) {
+                ZONETOOL_INFO("Batch dumping zone \"%s\"", z.string().c_str());
+                ::h1::command::execute("dumpzone " + z.string(), true);
+                ::h1::command::execute("unloadzones",    true);
+            }
+            ZONETOOL_INFO("batchdumpzonewalk complete (%zu zones)", zones.size());
+        });
+    }
+
+    void load_proto_stub(utils::hook::assembler& a)
@@ -480,6 +598,7 @@ void component::post_load() override
             zonetool::h1::initialize();
+
+            register_commands();
             // stop the game after loading common zones
             utils::hook::call(0x1405DF5C1, load_common_zones_stub);
         }
